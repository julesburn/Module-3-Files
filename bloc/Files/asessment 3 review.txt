BINARY SEARCH FUNCTION

function searchCollection(collection, value){
  var low = 0;
  var high = collection.length-1;

  while (low <= high){
    var mid = ((low+high)/2);
    if (collection[mid] > value){
      high = (mid-1);
  } else if (collection[mid] < value){
      low = (mid+1);
  } else {
      return mid;
    }
  } return "not found";
}  

BUBBLE SORT FUNCTION

function bubbleSort(collection){
  var swapped = false;

  for (i=0; i<collection.length-1; i++){
    if (collection[i] > collection[i+1]){
      var temp = collection[i]
      collection[i] = collection[i+1]
      collection[i+1] = temp
      swapped = true;
    }
  } while (swapped){
      return collection;
  }
}
  
GIVEN DATABASES WRITE A QUERY

SELECT ProfessorID, CourseName
FROM TotalAvailableCourses t
JOIN Professors p
ON t.ProfessorID = p.ProfessorID;


BUBBLE SORT

function bubbleSort(collection){
  var swapped = false

  for (i=0; i<collection.length-1; i++){
    if collection[i] > collection[i+1]{
      var temp = collection[i]
      collection[i] = collection[i+1]
      collection[i+1] = temp
      swapped = true
    }
  } while (swapped){
      return collection;
  }
};

BINARY SEARCH

function searchCollection(collection, value){
  var low = 0
  var high = collection.length - 1

  while (low<=high){
    var mid = ((low+high)/2)
    if (collection[mid] > value){
      high = mid - 1
    } else if (collection[mid] < value){
      low = mid + 1
    } else {
      return mid;
    } 
  } return "not found";
}; 

BUBBLE SORT FUNCTION

function bubbleSort(collection){
  var swapped = false

  for (i=0; i<collection.length -1; i++){
    if (collection[i]>collection[i+1]){
      var temp = collection[i]
      collection[i] = collection[i+1]
      collection[i+1] = temp
      swapped = true;
      }
    } while (swapped){
        return collection;
    }
  };

BINARY SEARCH FUNCTION

function searchCollection(collection, value){
  var low = 0
  var high = collection.length-1

  while (low<= high){
    var mid = ((low+high)/2)
    if (collection[mid] > value){
      high = collection[mid]-1;
  }else if (collection[mid] < value){
    low = collection[mid]+1;
  }else {
    return mid;
    }
  } return "not found";
};


QUICK SORT

//Helper function to swap items in the collection

function swap(items, leftIndex, rightIndex){
  var temp = items[leftIndex];
  items[leftIndex] = items[rightIndex];
  items[rightIndex] = temp;

//Function to perform the partition

function partition(items, left, right){

  var pivot = items[Math.floor((right+left / 2)] //element at midpoint
      left = left //left pointer
      right = right //right pointer
  
  while(left <= right){

    while (items[left] < pivot) {
      left++;
    }

    while (items[right]> pivot) {
      right--;
    }

    if(left <= right) {
      swap(items, left, right) //swap the two elements
      left++;
      right--;
    }
  }
  return left; //returns the index of the left pointer, used to divide the array and perform Quick Sort on that part
}

//Quick Sort function

function quickSort(items, left, right){
  
  var index;
  
  if (items.length > 1) {
    index = partition(items, left, right); //index returned from partition

    if (left < index -1) { //more elements on the left side of the pivot
      quickSort(items, left, index-1);
    }
    
    if (index < right) { //more elements on the right side of the pivot
      quicksort(items, index, right);
    }
  }

return items;
}


//first call to Quick Sort

var result = quickSort(items, 0, items.length - 1);

Time Complexity of O(n log n) (log linear)

BUBBLE SORT PRACTICE

function bubbleSort(collection){
  var swapped = false

  for (i=0; i<collection.length-1; i++){
   if (collection[i] > collection[i+1]){
     var temp = collection[i]
     collection[i] = collection[i+1]
     collection[i+1] = temp;
     swapped = true
   }
  } while (swapped){
  } return collection;
  }
return collection;
};

QUICK SORT ALGORITHM

//Helper function to swap the numbers

function swap(items, leftIndex, rightIndex){
  var temp = items[leftIndex]
  items[leftIndex] = items[rightIndex]
  items[rightIndex] = temp;
}  

//Helper function to perform the partition

function partition(items, left, right){
  var pivot = (Math.floor(left+right)/2) 

  while (left <= right){

    while(items[left] < pivot) {
      left++;
    }
    while (items[right] > pivot) {
      right--;
    }
    if (left <= right){
      swap(items, left, right) //swap the elements
      left++;
      right--;
    }
  }
  return left; //returns the index of the left pointer used to divide the array and perform a quick sort
};

//Quick sort function

function quickSort(items, left, right){
  var index;

  if(items.length > 1) {
    index = partition(items, left, right);
    if (left < index-1){
      quickSort(items, left, index-1)
    }
    if (index < right){
      quickSort(items, index, right)
    }
  }
  return items;
}

//Call to quick sort

var result = quickSort(items, 0, items.length-1)

BUBBLE SORT FUNCTION

function bubbleSort(collection){
  var swapped = false

  for (i=0; i<collection.length-1; i++){
    if collection[i] > collection[i+1]{
      var temp = collection[i]
      collection[i] = collection[i+1]
      collection[i+1] = temp
      swapped = true;
    }
  } while (swapped){
    return collection;
  }
};

BINARY SEARCH ALGORITHM

function binarySearch(collection, value){
  var low = 0
  var high = collection.length-1;

  while (low<=high){
    var mid = ((low+high)/2)
    if (collection[mid] > value) {
      high = mid -1;
    } else if (collection[mid] < value) {
      low = mid + 1;
    } else {
      return mid;
    }
  } return "not found";
};    

  