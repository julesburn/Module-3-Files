>In your own words, explain what clean code is and why it is important.

Clean code is code that has been compartmentalized in the most efficient 
way and optimized so that extra logic or unnecessarily complicated code 
has been omitted. Functions are reusable and sensibly organized so that 
they may be found quickly and accessed easily.


Clean code is important to maintain so that team members can easily interact 
with or update code, new programmers introduced to the code will be able to
quickly familiarize themselves with how the program works, and that updates,
general maintenance, and additions to the code base can be made efficiently.


>Read this article about Toyota and their use of bad code. Although you may not 
yet understand all of the topics discussed, think about another commonly used object 
that relies on computers and explain what would happen if the code was not created 
to an acceptable standard.

One of my friend's recently underwent LASIK eye surgery, which uses a computer to control the 
laser that doctor's use to correct patients' vision. There are a lot of robotic components in medical
procedures today. If the code was not created to an acceptable standard, these procedures could
end disasterously. Patients could be maimed or even die because lasers, robotic arms, or laproscopic 
equipment were programmed incorrectly or began to malfunction during a procedure. As a type 1 diabetic who uses 
an insulin pump, I rely on code to literally keep me alive. If the code in my pump were to malfunction, I could
receive too much or not enough insulin and die or go into shock. I have had my pump fail before and 
have had to call in for a new one to be shipped overnight. I don't know if it was a software
failure or some other sort of hardware failure, but it was a scary scenario.


>Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

```
FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x-32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

```

No, the code is overcommented and the variables are unclear. For most of the code, it is clear what the 
intended function of the line is. The comments are generally unnecessary. The variables should have names
that correspond with what they are. I also think that the steps could be broken down into separate 
functions convertToCelsius and convertToFahrenheit. 

```
FUNCTION (temperature, scale)  //Main function
  IF scale = "F" THEN
    do convertToCelsius
  ELSE IF scale = "C" THEN
    do convertToFahrenheit
  ELSE
   print "Scale must be in either Fahrenheit (F) or Celsius (C)"  //Error message
  END IF
END FUNCTION

FUNCTION convertToCelsius(temperature)
  set convertedTemperature to (temperature - 32)* (5/9)  //Formula to convert Fahrenheit to Celsius
  print convertedTemperature
END FUNCTION

FUNCTION convertToFahrenheit(temperature)
  set convertedTemperature to (temperature * 1.8000) + 32.00 //Formula to convert Celsius to Fahrenheit
  print convertedTemperature
END FUNCTION

```
  
>Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

```
FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
   SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

```
The code seems clean enough. I'm a little confused by the use of NOT(total=0) instead of just using an IF 
statement that prints the error if the total is equal to 0. I guess that could depend on the context of the
rest of the program. Flipping the logic around doesn't seem to be better or worse though. The only thing
that I think I would change is the name of the function - calculatePercentage rather than calcPercent, just 
to make sure that variable names are consistent throughout the code and so that the function name isn't abbreviated.


>Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

>a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

#Original

```
FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)

   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)

   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)

   END IF
END FUNCTION

```

#Refactored

```
Global Variable 
TAX = [local state tax rate]

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)

   CALL calculateTotal returning totalDue
   PRINT "Your total is equal to " totalDue


   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - totalDue

   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " totalDue

   END IF
END FUNCTION

FUNCTION calculateTotal(subTotal, discountRate, tax)

  set totalDue to (subTotal * discountRate + (subTotal * tax))
  return totalDue

END FUNCTION

```

b. The following function checks out a book if there are no issues with the guest's account.

#Original

```

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

```

#Refactored

```
FUNCTION checkoutBook(book, guest)

   CALL verifyGuestStanding(guest) 
   SET book.status to "Checked Out"
   PRINT "Your books have been issued."
END FUNCTION


FUNCTION verifyGuestStanding(guest)
  IF guest.accountActive AND IF NOT(guest.hasOverdueBooks) AND IF guest.outstandingFees = 0 THEN
   APPEND book to guest.books
  ELSE PRINT "Unable to check out book."
END FUNCTION

```

c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

#Original

```
CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

```

#Refactored

```
CLASS BalanceInformation

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

END CLASS

CLASS Offers

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

END CLASS
 ....
 ....
 ....

END

```

###Programming Questions

>You may do the following problems in any language of your choice. Use the clean code principles 
taught in this section while writing the code.

>Square Given an array of integers, find out whether the sum of the integers is a perfect square. 
If it is a perfect square, return the square root, otherwise return the sum.


```
function isPerfectSquare(array){
  const sum = array.reduce((total, amount) => total + amount);
  if (Math.sqrt(sum) !== NaN && Number.isInteger(Math.sqrt(sum))){
    return Math.sqrt(sum);
  } else {
    return sum;
    }
  }

```

>7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. 
The function should return true if any value appears at least twice in the array, 
and false if every element is distinct.

```
function isDuplicated(array){
  const sortedArray = array.sort(function(a, b){return a-b});
  for (i=0; i<sortedArray.length; i++){
    if (sortedArray[i] === sortedArray[i-1] || sortedArray[i] === sortedArray[i+1]){
      return true;
      } 
    }
  return false;
}

```

###Extra Credit

>Anagram An anagram is a word, phrase, or name formed by rearranging the letters of another word. 
For example, spar can be formed from rasp. Given two strings, stringOne and stringTwo, determine if 
stringOne is an anagram of stringTwo. Assume that the strings contain only lowercase letters and 
do not worry about case-sensitivity. Hint: Your first task will be to convert the strings to arrays.

```

function isAnagram(stringOne, stringTwo){
  const arrayOne = stringOne.toLowerCase().split('').sort();
  const arrayTwo = stringTwo.toLowerCase().split('').sort();
  if (arrayOne.length !== arrayTwo.length){
    return false;
  } else {
    for (i=0; i<arrayOne.length; i++){
      if (arrayOne[i] !== arrayTwo[i]){
        return false;
      }
    }
    return true;
  }
}

```